<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:a2a="http://www.mulesoft.org/schema/mule/a2a"
	xmlns:mac-inference="http://www.mulesoft.org/schema/mule/mac-inference" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:mcp="http://www.mulesoft.org/schema/mule/mcp" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/mcp http://www.mulesoft.org/schema/mule/mcp/current/mule-mcp.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/mac-inference http://www.mulesoft.org/schema/mule/mac-inference/current/mule-mac-inference.xsd
http://www.mulesoft.org/schema/mule/a2a http://www.mulesoft.org/schema/mule/a2a/current/mule-a2a.xsd">
	<sub-flow name="set-and-initialise-vars" doc:id="ddd5bf4b-9235-4b7e-9386-e400e5cd8410">
		<set-variable value='#[payload.message.parts[0].text default ""]' doc:name="Set task user prompt" doc:id="b1456931-b8a7-4677-b174-065899b1cb23" variableName="userPrompt" />
		<set-variable value="#[payload.id default uuid()]" doc:name="Set Task Id" doc:id="09dcca44-77ae-4647-becc-52969251f04d" variableName="task_id" />
		<set-variable value='#[(payload.sessionId) default ""]' doc:name="Set Session Id" doc:id="4ed0a3b7-ea19-40cf-ac20-714c9c008afc" variableName="session_id" />
		<set-variable value='#["OPENAI"]' doc:name="inferenceType" doc:id="7ce22fd1-8ef5-4f88-afb1-b6f6b9ba99f6" variableName="inferenceType"/>
		<set-variable value='${openai.apikey}' doc:name="apiKey" doc:id="028ca50e-98f4-4ae4-bbea-2e19d9edf32e" variableName="apiKey"/>
		<set-variable value='#["gpt-4o-mini"]' doc:name="model" doc:id="cc39205e-575d-4436-b049-717c0e25b49a" variableName="model"/>
		<set-variable value="#[{&#10;  'ERP MCP Server': p('mcpserver.erp.url')&#10;}]" doc:name="mcpservers" doc:id="3b60dd9c-fadb-4b7a-a438-3abf1f4a5063" variableName="mcpservers"/>
		<set-variable value='#["Tool results: "]' doc:name="set multiTools results" doc:id="2242b8da-a134-4b72-9ffd-93b87f69b91d" variableName="multiToolsResult" />
		<set-variable value="#[[]]" doc:name="set toolsUsed" doc:id="fd4e589e-fbe2-4275-baee-34e135b771bf" variableName="toolsUsed" />
		<set-variable value="#[[]]" doc:name="set COT" doc:id="720be86b-57e8-4fcc-b03f-06749e9d029c" variableName="chainsOfThoughts" />
		<set-variable value='#[{"tools":  []}]' doc:name="Set Tool Planning" doc:id="96b639fe-f99d-49b2-ae37-65df5d3ee7dd" variableName="planningPayload"/>
		<flow-ref doc:name="load prompts" doc:id="7c40a7dd-ba1f-4387-b686-edcd2fca6a19" name="load-prompts"/>
	</sub-flow>
	<sub-flow name="create-plan" doc:id="ef9c2d20-7967-4d7c-b56a-ddd9af66c363" >
		<scatter-gather doc:name="Scatter-Gather" doc:id="4411dda8-14f0-4ad2-adbd-38d12f69f73f" >
			<route >
				<mac-inference:agent-define-prompt-template doc:name="Create Plan" doc:id="96651109-b214-4a94-bd3b-6d6ac17fb2e2" config-ref="GENERAL">
					<mac-inference:template ><![CDATA[You are a planner agent. You answer general question based on your knowledge. Things you know of without making up things.]]></mac-inference:template>
					<mac-inference:instructions ><![CDATA[#[vars.inferencePlanningInstructions]]]></mac-inference:instructions>
					<mac-inference:data ><![CDATA[#["Users query: " ++ (vars.userPrompt as String) ++ 
", Current Observation through called tools: " ++ (vars.multiToolsResult as String) ++ 
", already executed tools: " ++ (write(vars.toolsUsed default {}, "application/json") as String)]]]></mac-inference:data>
				</mac-inference:agent-define-prompt-template>
				<set-variable value='#[%dw 2.0&#10;output application/json&#10;var jsonString = payload.response as String&#10;var cleanedString = jsonString replace /^```json\n/ with "" replace /```$/ with ""&#10;---&#10;read(cleanedString, "application/json")]' doc:name="Set multiTools" doc:id="0706208a-5c3c-490e-aed5-f29226042e44" variableName="multiTools" />
				<logger level="INFO" doc:name="🔎 Query Assessment 🔎" doc:id="35a339fa-99b5-4f8d-993c-05067dc1087a" message='#[%dw 2.0&#10;output text&#10;---&#10;"\n\n" ++&#10;"🔎🔎🔎🔎🔎️️ --------------------------  Query Assessment ----------------------- 🔎🔎🔎🔎🔎️\n" ++&#10;"Tools : \n" ++ &#10;write(vars.multiTools, "application/json") ++ &#10;"\n 🔎🔎🔎🔎🔎️️ ---------------------------------------------------------------------- 🔎🔎🔎🔎🔎️" ++&#10;"\n\n"]' category="🔎 Query Assessment 🔎"/>
			</route>
			<route >
				<mac-inference:mcp-tools-native-template doc:name="[MCP] Tooling" doc:id="5367d7dc-d043-4f38-9739-121a206cec5f" target="planningPayload" config-ref="GENERAL">
					<mac-inference:template ><![CDATA[You are a planner agent. You answer general question based on your knowledge.]]></mac-inference:template>
					<mac-inference:instructions ><![CDATA[#[vars.inferenceToolingInstructions]]]></mac-inference:instructions>
					<mac-inference:data ><![CDATA[#["Users query: " ++ (vars.userPrompt as String) ++ 
", Current Observation through called tools: " ++ (vars.multiToolsResult as String) ++ 
", already executed tools: " ++ (write(vars.toolsUsed default {}, "application/json") as String)]]]></mac-inference:data>
				</mac-inference:mcp-tools-native-template>
				<logger level="INFO" doc:name="🛠️ Tools reasoning 🛠️" doc:id="0b760f14-59e4-4653-9fae-b7a8694ed603" message='#[%dw 2.0&#10;output text&#10;---&#10;"\n\n" ++&#10;"🛠️🛠️🛠️🛠️🛠️️ --------------------------  Tool Reasoning -------------------------- 🛠️🛠️🛠️🛠️🛠️\n" ++&#10;"Tools : \n" ++ &#10;write(vars.planningPayload, "application/json") ++ &#10;"\n 🛠️🛠️🛠️🛠️🛠️️ ---------------------------------------------------------------------- 🛠️🛠️🛠️🛠️🛠️" ++&#10;"\n\n"]' category="🛠️ Tools reasoning 🛠️"/>
			</route>
		</scatter-gather>
		<set-variable value="#[%dw 2.0&#10;output application/json&#10;---&#10;(vars.chainsOfThoughts default []) ++ [{&#10;    &quot;cotId&quot;: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;},&#10;    &quot;plan&quot;: vars.multiTools.plan default &quot;&quot;,&#10;    &quot;multiTools&quot;: vars.multiTools.multiTools default true,&#10;    &quot;final&quot;: vars.multiTools.final default false,&#10;    &quot;toolsToCall&quot;: vars.planningPayload default &quot;&quot;&#10;}]]" doc:name="Set COT" doc:id="c9add113-0568-4ad1-8bac-5f17b02b5e8b" variableName="chainsOfThoughts" />
		<logger level="INFO" doc:name="⛓️‍💥 Chain of Thoughts ⛓️‍💥" doc:id="60c6b8f7-eb84-4a51-a5d1-d1283c290ebe" message='#[%dw 2.0&#10;output text&#10;---&#10;"\n\n" ++&#10;"⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥 --------------------------  Chain of Thoughts -------------------------- ⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥️\n" ++&#10;"Agent " ++ (vars.chainsOfThoughts as String default "") ++ "\n" ++&#10;"\n⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥️️ ----------------------------------------------------------------- ⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥⛓️‍💥️" ++&#10;"\n\n"]' category="⛓️‍💥 Chain of Thoughts ⛓️‍💥"/>
		<flow-ref doc:name="Assess and execute" doc:id="4b3e7994-d7fa-4461-aab1-08594f6f41ec" name="assess-and-execute"/>
	</sub-flow>
	<sub-flow name="assess-and-execute" doc:id="76d7a961-764e-43d6-ab34-95ca7968d3bb" >
		<choice doc:name="Choice" doc:id="13e33c57-5e5b-409f-a824-8f9b8a370cfe" >
			<when expression="#[(sizeOf(vars.planningPayload.tools default []) &gt; 0)]" >
				<set-variable value='#[%dw 2.0 output application/json --- vars.toolsUsed ++ vars.planningPayload.tools]' doc:name="Set Variable" doc:id="c61b8fe9-8b71-456c-99bc-a7d6b78f33f6" variableName="toolsUsed"/>
				<set-variable value='#[%dw 2.0&#10;output text/plain&#10;---&#10;vars.multiToolsResult as String ++ "\n" ++ write(vars.planningPayload.toolsExecutionReport, "application/json")]' doc:name="multiToolsResult" doc:id="a9f8f59d-dc41-463f-ad54-77bc20f2edc9" variableName="multiToolsResult" />
				<logger level="INFO" doc:name="⚙️ multiToolsResult ⚙️" doc:id="745c299d-dd5e-4951-88da-9a998938448c" message='#[%dw 2.0&#10;output text&#10;---&#10;"\n\n" ++&#10;"⚙️⚙️⚙️⚙️⚙️️‍ --------------------------  Multi Tool Result -------------------------- ⛓⚙️⚙️⚙️⚙️⚙️️‍💥⛓️‍💥️\n" ++&#10;"Tool Results " ++ (vars.multiToolsResult as String default "") ++ "\n" ++&#10;"\n ⚙️⚙️⚙️⚙️⚙️️  ----------------------------------------------------------------- ⚙️⚙️⚙️⚙️⚙️️‍️‍💥️" ++&#10;"\n\n"]' category="⚙️ multiToolsResult ⚙️"/>
				<choice doc:name="Choice" doc:id="7c217439-6bf7-4ba0-a4a6-7f1b1b942cbe" >
					<when expression="#[(vars.multiTools.multiTools == true)]">
						<flow-ref doc:name="Replanning" doc:id="2ff30bb8-1e65-4ef0-8357-f718aa0dc8ab" name="create-plan"/>
					</when>
				</choice>
				<mac-inference:agent-define-prompt-template doc:name="Reply to user using tool call" doc:id="c0acde70-2c57-401b-b9bf-a927ccdcecc8" config-ref="GENERAL">
					<mac-inference:template><![CDATA[ You are a helpful agent. Don't provide instructions to the users.]]></mac-inference:template>
					<mac-inference:instructions><![CDATA[Please answer the users question based on the tool calls. You have to consider the tool calls, and reply as if you have done the job and offer assistant in future. Dont say things like 'I'm here to help with your question!' or 'I'm here to help!', answer straight ]]></mac-inference:instructions>
					<mac-inference:data><![CDATA[#["Tool calls: " ++ vars.multiToolsResult as String ++ ", question: " ++ vars.userPrompt as String]]]></mac-inference:data>
				</mac-inference:agent-define-prompt-template>
			</when>
			<otherwise >
				<set-payload value="#[vars.planningPayload]" doc:name="Set Payload" doc:id="28ce85a6-b882-48a7-a9d4-77c81adf9962" />
			</otherwise>
		</choice>
	</sub-flow>
</mule>
