<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ms-aichain="http://www.mulesoft.org/schema/mule/ms-aichain" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ms-aichain http://www.mulesoft.org/schema/mule/ms-aichain/current/mule-ms-aichain.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="132685f1-43f6-4b9f-b02f-a7482b89abca" >
		<http:listener-connection host="0.0.0.0" port="8081" />
		<http:listener-interceptors >
			<http:cors-interceptor allowCredentials="true" >
				<http:origins >
					<http:public-resource />
				</http:origins>
			</http:cors-interceptor>
		</http:listener-interceptors>
	</http:listener-config>
	<ms-aichain:config name="GPT4o" llmType="OPENAI" configType="Configuration Json" modelName="gpt-4o" doc:name="MuleSoft AI Chain Config" doc:id="f6348af5-23e8-45f3-955c-3756631064e8" filePath='#[mule.home ++ "/apps/" ++ app.name ++ "/envVars.json"]' maxTokens="4000" />
	<ms-aichain:config name="GPTDALLE" llmType="OPENAI" configType="Configuration Json" modelName="dall-e-3" doc:name="MuleSoft AI Chain Config" doc:id="f5b55bef-6550-4b48-87ee-cec786d311cd" filePath='#[mule.home ++ "/apps/" ++ app.name ++ "/envVars.json"]'/>
	<flow name="camera-appFlow" doc:id="c85bde27-0df7-4a3c-bb65-a7ac95e85c19" >
		<http:listener doc:name="Listener" doc:id="2153830f-d2d4-43f0-805b-ca0cce5dcb60" config-ref="HTTP_Listener_config" path="/upload"/>
		<scatter-gather doc:name="Scatter-Gather" doc:id="4fd9e4f5-8425-4938-a7a1-a1014dc356cd" >
			<route >
				<ee:transform doc:name="Prep for File Write" doc:id="6be03d56-07d8-4574-a1da-75a8737deed0">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Binaries
output multipart/form-data
---
{
    parts:{
        base64Content:{
            headers:{
                "Content-Type":"application/pdf"
            },
            content: fromBase64(payload.pdf)
            },
        }
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="prompt"><![CDATA[%dw 2.0
output application/json
---
payload.instructions]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<set-payload value="#[payload]" doc:name="Set Payload" doc:id="b9db7853-de53-4c70-869a-6e9170a6d717" mimeType="application/pdf" />
				<file:write doc:name="Write" doc:id="8ea18ebf-fc12-4897-87ee-ec1c4225be68" path='#[mule.home ++ "/apps/" ++ app.name ++ "/webapp/ingested.pdf"]' />
				<ms-aichain:image-read-scanned-documents doc:name="Image read scanned documents" doc:id="70f7e7e3-6c97-4626-be9f-1efa6b345091" config-ref="GPT4o" filePath='#[mule.home ++ "/apps/" ++ app.name ++ "/webapp/ingested.pdf"]'>
					<ms-aichain:data><![CDATA[#["Please describe the image as a text - I will use the text in a further step to generate a generative AI Image with DALL-E3. Please consider small details. Make sure to align with OpenAI's safety policies. 
Comply with applicable laws—for example, do not: 
Compromise the privacy of others 
Engage in regulated activity without complying with applicable regulations
Promote or engage in any illegal activity, including the exploitation or harm of children and the development or distribution of illegal substances, goods, or services
Use subliminal, manipulative, or deceptive techniques that distort a person’s behavior so that they are unable to make informed decisions in a way that is likely to cause harm
Exploit any vulnerabilities related to age, disability, or socio-economic circumstances
Create or expand facial recognition databases without consent
Conduct real-time remote biometric identification in public spaces for law enforcement purposes
Evaluate or classify individuals based on their social behavior or personal traits (including social scoring or predictive profiling) leading to detrimental or unfavorable treatment
Assess or predict the risk of an individual committing a criminal offense based solely on their personal traits or on profiling
Infer an individual’s emotions in the workplace and educational settings, except when necessary for medical or safety reasons
Categorize individuals based on their biometric data to deduce or infer sensitive attributes such as their race, political opinions, religious beliefs, or sexual orientation"]]]></ms-aichain:data>
				</ms-aichain:image-read-scanned-documents>
				<logger level="INFO" doc:name="Logger" doc:id="992b5473-b0f2-425a-9b19-d99369b5f476" message="#[payload]"/>
				<ms-aichain:image-generate doc:name="Image generate" doc:id="a8061c83-cd94-4826-9460-0cb12054ebdb" config-ref="GPTDALLE">
			<ms-aichain:data><![CDATA[#["Generate a new version of the image in following style: " ++ vars.prompt ++ ", the following Image: " ++ "http://localhost:8081/web/image.png" ++ " and following image description" ++ payload[0].response[0]]]]></ms-aichain:data>
		</ms-aichain:image-generate>
			</route>
			<route >
				<ee:transform doc:name="Prep for File Write" doc:id="970a2305-64fb-4257-bdee-560efbe5fa4f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Binaries
output application/octet-stream
---
fromBase64(payload.png)]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="prompt"><![CDATA[%dw 2.0
output application/json
---
payload.instructions]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<set-payload value="#[payload]" doc:name="Set Payload" doc:id="608a8676-5c16-4176-9317-7fe5874fa26a" mimeType="image/png; content-disposition=inline" />
				<file:write doc:name="Write" doc:id="a90679c9-9b1d-4a03-9def-68b869207e15" path='#[mule.home ++ "/apps/" ++ app.name ++ "/webapp/image.png"]' />
			</route>
		</scatter-gather>
		<ee:transform doc:name="Transform Message" doc:id="f9727de6-ec7c-4b8b-97b6-a7ece79fecd2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{ imageURL: payload."0".payload.response}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="load-main-page-Flow" doc:id="573f06b7-48d7-472b-ba4c-cb4753c4917e" >
		<http:listener doc:name="HTML Listener" doc:id="f20ee44d-e556-490d-a981-8e8278cdc1ad" config-ref="HTTP_Listener_config" path="/web/*" />
		<http:load-static-resource doc:name="Load main page" doc:id="17ecf615-1b84-4175-a723-d264d2f669f5" resourceBasePath='#[mule.home ++ "/apps/" ++ app.name ++ "/webapp"]' />
	</flow>
</mule>
